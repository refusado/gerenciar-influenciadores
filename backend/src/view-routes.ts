import fastifyStatic from '@fastify/static';
import { FastifyInstance, FastifyReply, FastifyRequest } from 'fastify';
import path from 'path';
import env from '@/utils/env';
import { existsSync } from 'fs';

const clientRoot = path.resolve(__dirname, '../dist/web-app');

const pathExists = (file: string) => existsSync(path.join(clientRoot, file));

async function adminRouteHandler(request: FastifyRequest, reply: FastifyReply) {
  if (pathExists('admin.html')) {
    return reply.sendFile('admin.html', clientRoot);
  }

  if (pathExists('404.html')) {
    return reply.sendFile('404.html', clientRoot);
  }

  return reply.code(404).send({ error: 'Page not found' });
}

// handle view routes generated by the frontend
export async function viewRoutes(app: FastifyInstance) {
  app.register(fastifyStatic, {
    root: clientRoot,
    prefix: '/',
    wildcard: false,
  });

  app.get(
    '/admin',
    {
      preHandler: [app.authenticate],
      schema: { hide: true },
    },
    adminRouteHandler
  );

  app.get(
    '/admin/*',
    {
      preHandler: [app.authenticate],
      schema: { hide: true },
    },
    adminRouteHandler
  );

  // handle with routes that do not match an existing file or API endpoint
  // for SPAs pages, nextjs routing system will handle in the client-side, so we
  // redirect the user when there is a direct request to a SPA path to avoid 404
  app.setNotFoundHandler(async (request, reply) => {
    const url = new URL(request.url, env.BASE_URL);
    const urlPath = request.url === '/' ? 'index.html' : `${url.pathname}.html`;

    if (pathExists(urlPath)) {
      // sending the SPA requested path to query params so we can get the value
      // in the client-side and redirect the user properly with javascript
      return reply.redirect(`${env.BASE_URL}/?redirect=${request.url}`);
    }

    if (urlPath.startsWith('/api'))
      reply.code(404).send({ error: 'Page not found' });

    if (pathExists('404.html')) {
      return reply.sendFile('404.html', clientRoot);
    } else {
      return reply.redirect(`${env.BASE_URL}/?message=404`);
    }
  });
}
