import fastifyStatic from '@fastify/static';
import { FastifyInstance } from 'fastify';
import path from 'path';
import env from '@/utils/env';
import { existsSync } from 'fs';

// handling with html pages generated by nextjs in "build" directory
export async function viewRoutes(app: FastifyInstance) {
  const clientRoot = path.resolve(__dirname, '../../frontend/build');

  app.register(fastifyStatic, {
    root: clientRoot,
    prefix: '/',
  });

  const pathExists = (file: string): boolean => {
    return existsSync(path.join(clientRoot, file));
  };

  // for admin routes we need to check if the client is logged in
  app.get(
    '/admin',
    {
      preHandler: [app.authenticate],
    },
    async (request, reply) => {
      if (pathExists('admin.html')) {
        return reply.sendFile('admin.html', clientRoot);
      }

      if (pathExists('404.html')) {
        return reply.sendFile('404.html', clientRoot);
      }

      return reply.code(404).send({ error: 'Page not found' });
    }
  );

  // this redirect to the spa if the route is not found
  // obs.: once nextjs makes the routing system in the client side, all spa
  // pages will not be found with direct requests, so for spa routes we also make
  // this redirect to the base url. I'm sending the requested path in params so
  // we can handle the routing logic normally in the client side
  app.setNotFoundHandler(async (request, reply) => {
    const url = new URL(request.url, env.BASE_URL);
    const urlPath = request.url === '/' ? 'index.html' : `${url.pathname}.html`;

    if (pathExists(urlPath)) {
      return reply.redirect(`${env.BASE_URL}/?redirect=${request.url}`);
    }

    if (pathExists('404.html')) {
      return reply.sendFile('404.html', clientRoot);
    }

    return reply.code(404).send({ error: 'Page not found' });
  });
}
